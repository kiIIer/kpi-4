
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006c  0080006c  000002c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d2  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000110  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032f  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000dd  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001549  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

// ???? 1 - ????????????? ????????
int main (void)
{
    // ???? 1.1 - ????????? ?????? ?????????????? ???????????
    DDRC = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
    PORTC = 0x00;
  96:	15 ba       	out	0x15, r1	; 21
    DDRD = 0xFF;
  98:	81 bb       	out	0x11, r24	; 17
    PORTD = 0x00;
  9a:	12 ba       	out	0x12, r1	; 18

    // ???? 1.2 - ???????????? ??????? 2
    TIMSK |= (1 << TOIE2); // ?????? ??????????? ?? ??????? 2
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	89 bf       	out	0x39, r24	; 57
    TCCR2 |= (1 << CS21);  // ???????????? ?? 8
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 bd       	out	0x25, r24	; 37

    // ???? 1.3 - ???????????? ???
    ADCSRA |= (1 << ADEN) // ?????? ???
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	8e 6e       	ori	r24, 0xEE	; 238
  ac:	86 b9       	out	0x06, r24	; 6
    |(1 << ADSC) // ?????? ????????????
    |(1 << ADATE) // ??????????? ????? ?????? ???
    |(1 << ADPS2)|(1 << ADPS1) // ???????????? ?? 64
    |(1 << ADIE); // ?????? ?????????? ??? ???

    ADMUX &= (~(1 << REFS1))&(~(1 << REFS0)); // ???????? ???
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 73       	andi	r24, 0x3F	; 63
  b2:	87 b9       	out	0x07, r24	; 7
    
    // ???? 1.4 - ?????????? ?????? ??????????
    sei();
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x24>

000000b8 <__vector_16>:
    }
}

// ???? 2 - ????? ??????????? ??? ???
ISR (ADC_vect)
{// ???? 3 - ???????? ??????????? ??? ???
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	display = ADC;
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	90 93 6d 00 	sts	0x006D, r25
  ce:	80 93 6c 00 	sts	0x006C, r24
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_5>:

// ???? 4 - ????? ??????????? ??? ??????? ?2
ISR (TIMER2_OVF_vect)
{// ???? 5 - ???????? ?????????? ??? ??????? ?2
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
    PORTD = 0xFF; // ????????? ??? ????????
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	82 bb       	out	0x12, r24	; 18
    PORTC = (1 << current_indicator); // ???????? ???????? ?????????
 106:	80 91 6e 00 	lds	r24, 0x006E
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <__vector_5+0x36>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <__vector_5+0x32>
 11a:	45 bb       	out	0x15, r20	; 21
        
    switch (current_indicator)
 11c:	80 91 6e 00 	lds	r24, 0x006E
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	d9 f0       	breq	.+54     	; 0x15a <__vector_5+0x7a>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	30 f0       	brcs	.+12     	; 0x134 <__vector_5+0x54>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	51 f1       	breq	.+84     	; 0x180 <__vector_5+0xa0>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	09 f0       	breq	.+2      	; 0x132 <__vector_5+0x52>
 130:	48 c0       	rjmp	.+144    	; 0x1c2 <__vector_5+0xe2>
 132:	39 c0       	rjmp	.+114    	; 0x1a6 <__vector_5+0xc6>
    {
        case 0:
        PORTD = ~(SEG[display % 10000 / 1000]); // ???????? ????? ????????
 134:	80 91 6c 00 	lds	r24, 0x006C
 138:	90 91 6d 00 	lds	r25, 0x006D
 13c:	60 e1       	ldi	r22, 0x10	; 16
 13e:	77 e2       	ldi	r23, 0x27	; 39
 140:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 144:	68 ee       	ldi	r22, 0xE8	; 232
 146:	73 e0       	ldi	r23, 0x03	; 3
 148:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 14c:	fb 01       	movw	r30, r22
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	80 95       	com	r24
 156:	82 bb       	out	0x12, r24	; 18
        break;
 158:	34 c0       	rjmp	.+104    	; 0x1c2 <__vector_5+0xe2>
        case 1:
        PORTD = ~((SEG[display % 1000 / 100])); // ???????? ????? ??????? ?? ??????
 15a:	80 91 6c 00 	lds	r24, 0x006C
 15e:	90 91 6d 00 	lds	r25, 0x006D
 162:	68 ee       	ldi	r22, 0xE8	; 232
 164:	73 e0       	ldi	r23, 0x03	; 3
 166:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 16a:	64 e6       	ldi	r22, 0x64	; 100
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 172:	fb 01       	movw	r30, r22
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	80 95       	com	r24
 17c:	82 bb       	out	0x12, r24	; 18
        break;
 17e:	21 c0       	rjmp	.+66     	; 0x1c2 <__vector_5+0xe2>
        case 2:
        PORTD = ~(SEG[display % 100 / 10]); // ???????? ????? ???????
 180:	80 91 6c 00 	lds	r24, 0x006C
 184:	90 91 6d 00 	lds	r25, 0x006D
 188:	64 e6       	ldi	r22, 0x64	; 100
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 198:	fb 01       	movw	r30, r22
 19a:	e0 5a       	subi	r30, 0xA0	; 160
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
 1a0:	80 95       	com	r24
 1a2:	82 bb       	out	0x12, r24	; 18
        break;
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <__vector_5+0xe2>
        case 3:
        PORTD = ~(SEG[display % 10 / 1]); // ???????? ????? ?????
 1a6:	80 91 6c 00 	lds	r24, 0x006C
 1aa:	90 91 6d 00 	lds	r25, 0x006D
 1ae:	6a e0       	ldi	r22, 0x0A	; 10
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodhi4>
 1b6:	fc 01       	movw	r30, r24
 1b8:	e0 5a       	subi	r30, 0xA0	; 160
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	80 95       	com	r24
 1c0:	82 bb       	out	0x12, r24	; 18
        break;
    }
    if ((current_indicator++) > 2) // ?????????? ?? ????????? ?????????
 1c2:	80 91 6e 00 	lds	r24, 0x006E
 1c6:	98 2f       	mov	r25, r24
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	90 93 6e 00 	sts	0x006E, r25
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <__vector_5+0xf6>
        current_indicator = 0; // ?????????, ???? ??? ?? ??????
 1d2:	10 92 6e 00 	sts	0x006E, r1
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__udivmodhi4>:
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	51 e1       	ldi	r21, 0x11	; 17
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <__udivmodhi4_ep>

00000200 <__udivmodhi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	a6 17       	cp	r26, r22
 206:	b7 07       	cpc	r27, r23
 208:	10 f0       	brcs	.+4      	; 0x20e <__udivmodhi4_ep>
 20a:	a6 1b       	sub	r26, r22
 20c:	b7 0b       	sbc	r27, r23

0000020e <__udivmodhi4_ep>:
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	5a 95       	dec	r21
 214:	a9 f7       	brne	.-22     	; 0x200 <__udivmodhi4_loop>
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	bc 01       	movw	r22, r24
 21c:	cd 01       	movw	r24, r26
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
